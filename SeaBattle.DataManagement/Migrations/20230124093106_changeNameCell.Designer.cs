// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SeaBattle.DataManagement.Models;

#nullable disable

namespace SeaBattle.DataManagement.Migrations
{
    [DbContext(typeof(SeabattleContext))]
    [Migration("20230124093106_changeNameCell")]
    partial class changeNameCell
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SeaBattle.DataManagement.Models.AppLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<long>("IdPlayer")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player");

                    b.Property<string>("Information")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("information");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.HasKey("Id")
                        .HasName("app_logs_pkey");

                    b.HasIndex("IdPlayer");

                    b.ToTable("app_logs", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.CellDto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("CoordinateX")
                        .HasColumnType("bigint")
                        .HasColumnName("coordinate x");

                    b.Property<long>("CoordinateY")
                        .HasColumnType("bigint")
                        .HasColumnName("coordinate y");

                    b.Property<long>("IdShip")
                        .HasColumnType("bigint")
                        .HasColumnName("id_ship");

                    b.Property<bool>("IsDead")
                        .HasColumnType("boolean")
                        .HasColumnName("is dead");

                    b.HasKey("Id")
                        .HasName("cells_pkey");

                    b.HasIndex("IdShip");

                    b.ToTable("cells", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Playarea", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ConfirmedPlayarea")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("confirmed_playarea");

                    b.Property<long>("IdPlayer")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player");

                    b.Property<string>("Playarea1")
                        .HasColumnType("text")
                        .HasColumnName("playarea");

                    b.HasKey("Id")
                        .HasName("playareas_pkey");

                    b.ToTable("playareas", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("players_pkey");

                    b.HasIndex(new[] { "Name" }, "players_name_unique")
                        .IsUnique();

                    b.ToTable("players", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.SeabattleGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndGame")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("end_game");

                    b.Property<string>("GameMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_message");

                    b.Property<long?>("IdPlayerTurn")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_turn");

                    b.Property<long?>("IdPlayerWin")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_win");

                    b.Property<long>("IdSession")
                        .HasColumnType("bigint")
                        .HasColumnName("id_session");

                    b.Property<DateTime?>("StartGame")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("start_game");

                    b.HasKey("Id")
                        .HasName("seabattle_games_pkey");

                    b.HasIndex("IdPlayerTurn");

                    b.HasIndex("IdPlayerWin");

                    b.HasIndex(new[] { "IdSession" }, "seabattle_games_id_session_unique")
                        .IsUnique();

                    b.ToTable("seabattle_games", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("EndSession")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("end_session");

                    b.Property<long>("IdPlayerHost")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_host");

                    b.Property<long?>("IdPlayerJoin")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_join");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("StartSession")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("start_session");

                    b.HasKey("Id")
                        .HasName("sessions_pkey");

                    b.HasIndex("IdPlayerHost");

                    b.HasIndex("IdPlayerJoin");

                    b.HasIndex(new[] { "Name" }, "sessions_name_unique")
                        .IsUnique();

                    b.ToTable("sessions", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Ship", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("IdPlayarea")
                        .HasColumnType("bigint")
                        .HasColumnName("id_playarea");

                    b.Property<long>("Length")
                        .HasColumnType("bigint")
                        .HasColumnName("length");

                    b.HasKey("Id")
                        .HasName("ships_pkey");

                    b.HasIndex("IdPlayarea");

                    b.ToTable("ships", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Shoot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("IdPlayerShoot")
                        .HasColumnType("bigint")
                        .HasColumnName("id_player_shoot");

                    b.Property<long>("IdSeabattleGame")
                        .HasColumnType("bigint")
                        .HasColumnName("id_seabattle_game");

                    b.Property<long>("ShootCoordinateX")
                        .HasColumnType("bigint")
                        .HasColumnName("shoot_coordinate_X");

                    b.Property<long>("ShootCoordinateY")
                        .HasColumnType("bigint")
                        .HasColumnName("shoot_coordinate_Y");

                    b.Property<DateTime>("TimeShoot")
                        .HasPrecision(0)
                        .HasColumnType("timestamp(0) with time zone")
                        .HasColumnName("time_shoot");

                    b.HasKey("Id")
                        .HasName("shoots_pkey");

                    b.HasIndex("IdPlayerShoot");

                    b.HasIndex(new[] { "IdSeabattleGame" }, "shoots_id_seabattle_game_unique")
                        .IsUnique();

                    b.ToTable("shoots", (string)null);
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.AppLog", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerNavigation")
                        .WithMany("AppLogs")
                        .HasForeignKey("IdPlayer")
                        .IsRequired()
                        .HasConstraintName("app_logs_id_player_foreign");

                    b.Navigation("IdPlayerNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.CellDto", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Ship", "IdShipNavigation")
                        .WithMany("Cells")
                        .HasForeignKey("IdShip")
                        .IsRequired()
                        .HasConstraintName("cells_id_ships");

                    b.Navigation("IdShipNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.SeabattleGame", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerTurnNavigation")
                        .WithMany("SeabattleGameIdPlayerTurnNavigations")
                        .HasForeignKey("IdPlayerTurn")
                        .HasConstraintName("seabattle_games_id_player_turn_foreign");

                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerWinNavigation")
                        .WithMany("SeabattleGameIdPlayerWinNavigations")
                        .HasForeignKey("IdPlayerWin")
                        .HasConstraintName("seabattle_games_id_player_win_foreign");

                    b.HasOne("SeaBattle.DataManagement.Models.Session", "IdSessionNavigation")
                        .WithOne("SeabattleGame")
                        .HasForeignKey("SeaBattle.DataManagement.Models.SeabattleGame", "IdSession")
                        .IsRequired()
                        .HasConstraintName("seabattle_games_id_session_foreign");

                    b.Navigation("IdPlayerTurnNavigation");

                    b.Navigation("IdPlayerWinNavigation");

                    b.Navigation("IdSessionNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Session", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerHostNavigation")
                        .WithMany("SessionIdPlayerHostNavigations")
                        .HasForeignKey("IdPlayerHost")
                        .IsRequired()
                        .HasConstraintName("sessions_id_player_host_foreign");

                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerJoinNavigation")
                        .WithMany("SessionIdPlayerJoinNavigations")
                        .HasForeignKey("IdPlayerJoin")
                        .HasConstraintName("sessions_id_player_join_foreign");

                    b.Navigation("IdPlayerHostNavigation");

                    b.Navigation("IdPlayerJoinNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Ship", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Playarea", "IdPlayareaNavigation")
                        .WithMany("Ships")
                        .HasForeignKey("IdPlayarea")
                        .IsRequired()
                        .HasConstraintName("ships_id_playarea");

                    b.Navigation("IdPlayareaNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Shoot", b =>
                {
                    b.HasOne("SeaBattle.DataManagement.Models.Player", "IdPlayerShootNavigation")
                        .WithMany("Shoots")
                        .HasForeignKey("IdPlayerShoot")
                        .IsRequired()
                        .HasConstraintName("shoots_id_player_shoot_foreign");

                    b.HasOne("SeaBattle.DataManagement.Models.SeabattleGame", "IdSeabattleGameNavigation")
                        .WithOne("Shoot")
                        .HasForeignKey("SeaBattle.DataManagement.Models.Shoot", "IdSeabattleGame")
                        .IsRequired()
                        .HasConstraintName("shoots_id_seabattle_game_foreign");

                    b.Navigation("IdPlayerShootNavigation");

                    b.Navigation("IdSeabattleGameNavigation");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Playarea", b =>
                {
                    b.Navigation("Ships");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Player", b =>
                {
                    b.Navigation("AppLogs");

                    b.Navigation("SeabattleGameIdPlayerTurnNavigations");

                    b.Navigation("SeabattleGameIdPlayerWinNavigations");

                    b.Navigation("SessionIdPlayerHostNavigations");

                    b.Navigation("SessionIdPlayerJoinNavigations");

                    b.Navigation("Shoots");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.SeabattleGame", b =>
                {
                    b.Navigation("Shoot");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Session", b =>
                {
                    b.Navigation("SeabattleGame");
                });

            modelBuilder.Entity("SeaBattle.DataManagement.Models.Ship", b =>
                {
                    b.Navigation("Cells");
                });
#pragma warning restore 612, 618
        }
    }
}
